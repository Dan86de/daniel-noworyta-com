@import "tailwindcss";
@import "./fonts.css";
@import "./theme.css";

@plugin "@tailwindcss/typography";
@custom-variant dark (&:where(.dark, .dark *));

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Prevent font size inflation */
html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: var(--font-sans);
}

/* Remove default margin in favour of better control in authored CSS */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin-block-end: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role="list"],
ol[role="list"] {
  list-style: none;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  line-height: 1.5;
  background: var(--background);
  color: var(--foreground);
  font-family: var(--font-sans);
}

/* Set shorter line heights on headings and interactive elements */
h1,
h2,
h3,
h4,
button,
input,
label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */
h1,
h2,
h3,
h4 {
  text-wrap: balance;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
  color: currentColor;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font-family: inherit;
  font-size: inherit;
}

/* Make sure textareas without a rows attribute are not tiny */
textarea:not([rows]) {
  min-height: 10em;
}

/* Anything that has been anchored to should have extra scroll margin */
:target {
  scroll-margin-block: 5ex;
}

.dark {
  --foreground: #ededed;
  --background: #0a0a0a;
  --gradient-title-primary: var(--foreground);
  --gradient-title-secondary: var(--color-neutral-300);
}

/* Nice trick for mobile buttons to make touchable area bigger on tablets and mobile devices */
/* Don't forget to add relative to the parent element */
/* More info here: https://www.youtube.com/watch?v=soFSSkf4oVY */
span.touch-target {
  @apply size-12 absolute top-1/2 left-1/2 -translate-1/2 [@media(pointer:fine)]:hidden;
}

/*=== EVERY LAYOUT STYLES ===*/

/* STACK COMPONENT */
@utility stack {
  @apply flex flex-col justify-start;

  & > * {
    @apply my-0;
  }

  & > * + * {
    margin-block-start: var(--space, 1.5rem);
  }
}
/* BOX COMPONENT */
@utility box {
  @apply p-[--spacing(var(--box-padding))] outline-offset-[calc(var(--box-border-width)*-1)] text-(--foreground) bg-(--background);
  outline: var(--box-border-width) transparent;
  border-width: var(--box-border-width);
}

@utility box-invert {
  @apply p-[--spacing(var(--box-padding))] outline-offset-[calc(var(--box-border-width)*-1)] text-(--background) bg-(--foreground);
  outline: var(--box-border-width) transparent;
  border-width: var(--box-border-width);
}

/* CENTER COMPONENT */
@utility center {
  /* ↓ Apply the minimum horizontal space */
  @apply px-[--spacing(var(--center-padding))];

  /* ↓ Remove padding from the width calculation */
  box-sizing: content-box;

  /* ↓ The maximum width is the maximum measure */
  max-inline-size: var(--center-max-width);

  /* ↓ Only affect horizontal margins */
  margin-inline: auto;
}

/* COVER COMPONENT */
@utility cover {
  display: flex;
  flex-direction: column;
  min-block-size: var(--cover-min-block-size);

  & > * {
    margin-block: auto;
  }

  & > :first-child:not(div) {
    margin-block-start: 0;
  }

  & > :last-child:not(div) {
    margin-block-end: 0;
  }

  & > div {
    margin-block: auto;
  }
}

/* CLUSTER COMPONENT */
@utility cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--cluster-space, 1rem);
  justify-content: flex-start;
  align-items: center;
}

/* SIDEBAR COMPONENT */
@utility sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--sidebar-gap);

  & > :first-child {
    flex-basis: var(--sidebar-width);
    flex-grow: 1;
  }

  & > :last-child {
    flex-basis: 0;
    flex-grow: 999;
    min-inline-size: var(--sidebar-content-min);
  }
}

/* SWITCHER COMPONENT */
@utility switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--switcher-gap);

  & > * {
    flex-grow: 1;
    flex-basis: calc((var(--switcher-container-width) - 100%) * 999);
  }

  & > :nth-last-child(n + 4),
  & > :nth-last-child(n + 4) ~ * {
    flex-basis: 100%;
  }
}
/* GRID COMPONENT */
@utility grid-utility {
  display: grid;
  grid-gap: var(--grid-space);

  @supports (width: min(var(--grid-min-width), 100%)) {
    grid-template-columns: repeat(
      auto-fit,
      minmax(min(var(--grid-min-width), 100%), 1fr)
    );
  }
}

/* FRAME COMPONENT */
@utility frame {
  aspect-ratio: var(--frame-n) / var(--frame-d);
  overflow: hidden;
  display: flex;
  justify-content: center;
  align-items: center;

  & > img,
  & > video {
    inline-size: 100%;
    block-size: 100%;
    object-fit: cover;
  }
}

/* IMPOSTER COMPONENT */
@utility imposter {
  position: absolute;
  inset-block-start: 50%;
  inset-inline-start: 50%;
  transform: translate(-50%, -50%);

  &.contain {
    overflow: auto;
    max-inline-size: calc(100% - (var(--imposter-margin) * 2));
    max-block-size: calc(100% - (var(--imposter-margin) * 2));
  }
}
/* ICON COMPONENT */
@utility icon {
  width: 0.75em;
  width: 1cap;
  height: 0.75em;
  height: 1cap;
}
@utility with-icon {
  display: inline-flex;
  align-items: baseline;

  & .icon {
    margin-inline-end: var(--icon-space);
  }
}

/* EVERY LAYOUT STYLES END */

.link {
  @apply outline-primary outline-2 outline-offset-2;
}

a:focus-visible {
  @apply outline-primary outline-2 outline-offset-2;
}

.gridLine {
  --color: var(--color-primary);
  --size: 32px;

  &[data-direction="vertical"] {
    width: 1px;
    height: 100%;
    background: linear-gradient(
      to bottom,
      var(--color),
      var(--color) 50%,
      transparent 0,
      transparent
    );
    background-size: 1px var(--size);
  }

  &[data-direction="horizontal"] {
    width: 100%;
    height: 1px;
    background: linear-gradient(
      to right,
      var(--color),
      var(--color) 50%,
      transparent 0,
      transparent
    );
    background-size: var(--size) 1px;
  }
}

.stacking {
  display: grid;
  place-items: center;

  > * {
    grid-area: 1 / 1;
  }
}
